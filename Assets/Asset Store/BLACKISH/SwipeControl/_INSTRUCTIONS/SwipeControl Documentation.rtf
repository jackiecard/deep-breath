{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww16020\viewh15220\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\b\fs34 \cf0 SwipeControl
\b0\fs24 \
\

\b\fs28 Getting Started
\b0\fs24 \
\
Check out the Examples scenes and watch the video at http://gameassets.net/swipeControl.html\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs28 \cf0 New in version 1.3.2:
\b0\fs24 \
\
\'95 "selected" now works for mouse input if "clickEdgeToSwitch" is disabled! (monitor "selected" - if it changes, the user has clicked instead of swiped)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
\

\b\fs28 New in version 1.3.1:
\b0\fs24 \
\
\pard\pardeftab720
\cf0 \'95\'a0Updated example Javascript code to work with stricter strict compilation mode in Unity 3.4\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \'95 Reorganized the files a bit\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 \'95 NEW: 
\b0 Added a variant of SwipeControl that allows for 
\b horizontal and/or vertical swiping
\b0 : I called it 
\b SwipeControlXY
\b0  - basically it uses Vector2s instead of floats\

\b \'95 NEW:
\b0  Added two new versions of the ImageDisplay script that work with SwipeControlXY -
\b  ImageDisplayXYVertical
\b0  and 
\b ImageDisplayXYHorziontal
\b0  - Plus new Demo-scenes called SwipeControlXYHorizontal and SwipeControlXYVertical\
\
\'95 The 
\b new scripts contain a few name-changes
\b0  to make the sourcecode easier to understand (I didn't change the old scripts - they remain as they were!):\
partWidth => pxDistBetweenValues\
mouseRect => activeArea\
\
\'95 
\b NEW: bufferZone
\b0  - the amount of bounce allowed when you hit the end, in percent of one elements size. - in "classic" SwipeControl the bufferZone was fixed to 12% (0.12f), now it can be whatever you want it to be.\
\
\'95 
\b NEW:
\b0  The new ImageDisplayXY scripts have a "
\b DisplayAll
\b0 " option that renders all the images instead of only showing the selected one and fading between the previous and next.\
\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs28 \cf0 Building your own scripts to work with SwipeControl
\fs24 \
\
A) Setting up SwipeControl
\b0 \
\
You might choose to set up some variables of SwipeControl in your script instead of entering the values in the inspector. (The reason might be that you want to position it in a certain way, for example.)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 skipAutoSetup
\b0  = true; //Usually Setup() will be called in Start, this skips it, so you can apply your changes and call Setup() manually once you're done\

\b currentValue
\b0  = 2; //the current rounded value - this is also the value that it's at before it starts\

\b startValue
\b0  = 5; //this value gets applied when Setup() is done, so setting currentValue to 2 and startValue to 5, will make it scroll from position 2 to 5 in the beginning.\

\b maxValue
\b0  = 10; //max value, currentValue can't get higher than this\

\b SetMouseRect
\b0 (new Rect(0, 0, Screen.width, Screen.height)); //Your clicks/touches have to start inside this Rect to register with SwipeControl. In this example we use the entire screen. (enable the debug checkbox at the bottom of the inspector to have a box drawn around your Rect)\

\b clickEdgeToSwitch
\b0  = false; //We don't want the user to be able to click the edges of the screen to move back/forward - only swiping will be possible\

\b partWidth
\b0  = Screen.width / maxValue; //partWidth is the amount of pixels you have to move the mouse/finger so that the currentValue increases/decreases by one. In this example we make it dependent on the Screen.width and the given maxValue, so that a swipe from one edge of the screen to another will scroll through all possible values. - Set this to the width of your GUI-image if you want it to move with your cursor/finger exactly. (You can set this to a negative value to invert the direction of the swipes)\

\b Setup
\b0 (); //now we call Setup() and this starts SwipeControl. \
\
\

\b B) Working with values
\b0 \
\
Now comes the fun part! Once SwipeControl is running, you can use its values to do interesting stuff. (Move around GUI-elements, 3D objects, zoom cameras, etc. - you name it.)\
\
You'll mostly work with these 2 values:\
\

\b smoothValue
\b0  is a float that is easing towards the selected value. - use this to move/manipulate your GUI/3D objects/etc.\

\b currentValue
\b0  is an integer that holds the currently "selected" value. - use this if you want to know the current selection\
\
For example:\
\
function Update() \{\
	//this example assumes you have a reference to SwipeControl in swipeCtrl\
	transform.position.x = 22.5 + 10.0 * swipeCtrl.smoothValue; // if smoothValue is at 6.85 your transform's x-position will be set to 22.5 + 10.0*6.85 = 91.\
\}}